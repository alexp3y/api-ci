name: Deploy to Staging

on:
  push:
    branches: [main]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # Skip deployment if the commit message contains [skip staging]
    if: ${{ !contains(github.event.head_commit.message, '[skip staging]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      # Mock deployment step (replace with your actual deployment method)
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "API Version: $(node -p "require('./package.json').version")"
          # Add your actual deployment commands here
          # For example: aws s3 sync ./build s3://your-staging-bucket/

      - name: Notify successful deployment
        run: |
          echo "Staging deployment successful!"
          echo "Deployed API Version: $(node -p "require('./package.json').version")"
